TODO
	=> create necessary  mutations 
		- SysEditor
			- update methods

	=> Write transformer unit tests


	=> move upload stuff to separate microservice
		- upload & remove documents
			- fs server removes file then makes
			  a request for document removal on behalf
			  of the current user, using auth token, to
			  the graphql api.

		- later look into
			- upload iframe with progress report
			- also add csrf token



	=> make it usable for Hunters
		- create models
			- Company
			- Hunter
	
	=> refactoring
		=> look into the whole "utils" anti-pattern
		=> move all "schema" files to graphql text files
		=> review CRUD system
		=> refactor some tests to make use of sub-tests, maybe
		=> refactor test cases to be table driven, some kinda are,
			but in a really hacky way.
		=> consider using "frozen" db states as fixtures
		=> consider putting expected outputs in "golden files", this will
			definitely make things easier when testing query results... nvm,
			it probably won't work because we have some "dynamic" results, which
			are based on the input
		=> add mock flag to test cases, that way they can be run either on real db
			or using the mock interface

	=> Things for later on

		- Cascading Deletes
			- removing an account means removing related
				recruit profile  and related documents
			- removing a recruit profile needs all related 
				recruit info, like Documents to be deleted


			- Either perform cascading deletes 

				OR

			- Have a CRON job that periodically removes 
			  non-refrenced documents, i.e. cleaning the 
			  db
		
		- review issues such as flaky network and sturf
		- start serving from tls

		- token system
			- consider firebase auth

			OR
			- add createdAccessTokens to TokenManager.Tokens
			- validate that accessToken is in TokenManager.Tokens before
			  granting access
			- use key & cert to encode and decode tokens
			- consider user devices and ip address as extra means of security

		
